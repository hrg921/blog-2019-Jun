{"data":{"allMarkdownRemark":{"edges":[{"node":{"fields":{"category":["SOLID"]},"excerpt":"Open-Closed Principle In object-oriented programming, the open/closed principle states \"software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification\"; 1  that is, such an entity can allow its behaviour to be extended without modifying its source code. The name open/closed principle has been used in two ways. Both ways use generalizations (for instance, inheritance or delegate functions) to resolve the apparent dilemma, but the goals, techniques…","id":"62049d7e-1ff4-5501-91e7-6aa1b2eec423","frontmatter":{"title":"Open-Closed Principle","created":"2019-05-21T00:00:00.000Z"}}},{"node":{"fields":{"category":["SOLID"]},"excerpt":"Single Responsibility Principle The single responsibility principle is a computer programming principle that states that every module, class, or function 1  should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by the class. All its services should be narrowly aligned with that responsibility. Robert C. Martin expresses the principle as, \"A class should have only one reason to change,\" 1  although…","id":"eda5173b-76ca-5e7e-be43-4c78c1554eaf","frontmatter":{"title":"Single Responsibility Principle","created":"2019-05-21T00:00:00.000Z"}}},{"node":{"fields":{"category":["SOLID"]},"excerpt":"SOLID In object-oriented computer programming, SOLID is a mnemonic acronym for five design principles intended to make software designs more understandable, flexible and maintainable. It is not related to the GRASP software design principles. The principles are a subset of many principles promoted by American software engineer and instructor Robert C. Martin. 1 3  Though they apply to any object-oriented design, the SOLID principles can also form a core philosophy for methodologies such as agile…","id":"84580c2a-6263-505b-a542-ea0c494dd222","frontmatter":{"title":"SOLID","created":"2019-05-21T00:00:00.000Z"}}},{"node":{"fields":{"category":["algorithm"]},"excerpt":"Throttle VS Debounce Link Throttle: the original function be called at most once per specified period.\nDebounce: the original function be called after the caller stops calling the decorated function after a specified period. Throttle: 몇 초에 한번 함수 호출\nDebounce: 몇초당 한번 콜러가 콜을 그만뒀는지 보고 그만뒀으면 함수 호출 References https://stackoverflow.com/questions/25991367/difference-between-throttling-and-debouncing-a-function","id":"4766bb8d-bea5-5a8e-b206-bdaef3220682","frontmatter":{"title":"Basic Types of TypeScript","created":"2019-04-29T00:00:00.000Z"}}},{"node":{"fields":{"category":["css"]},"excerpt":"Proper usage of z-index The  stacking context  is a three-dimensional conceptualization of HTML elements along imaginary z-axis relative to the user, who is assumed to be facing the viewport or the webpage. HTML elements occupy this space in priority order based on element attributes. The stacking context Scenario Root element of the document position: absolute or relative (z-index: auto) position: fixed or sticky flexbox children (z-index: auto) grid childrent (z-index: auto) opacity < 1 mix…","id":"a466a299-a2e7-5ec6-86dc-37097fd28b18","frontmatter":{"title":"The stacking context","created":"2019-04-27T00:00:00.000Z"}}},{"node":{"fields":{"category":["css"]},"excerpt":"Float vs Flex 정렬을 위해 float과 flex를 사용한다. MDN에 나온 Float의 정의는 다음과 같다. Float's definition in MDN The float CSS property places an element on the left or right side of its container,  allowing text and inline elements to wrap around it . The element is  removed from the normal flow of the page, though still remaining a part of the flow  (in contrast to absolute positioning). Float의 위험성 float 속성을 이용하면 정상적인 페이지의 흐름에서 제외시키지만 흐름의 일부로 납둔다고 한다. 이는 CSS전체의 흐름에 안좋은 영향을 미칠 수 있다. 알게 모르게 페이지가 이상하게 동작한다면 float…","id":"54ff1a76-bbd4-5ea7-b54d-194269977903","frontmatter":{"title":"Why float property has to be avoided","created":"2019-04-24T00:00:00.000Z"}}},{"node":{"fields":{"category":["typescript","language specification"]},"excerpt":"Boolean, Number, String, Array는 알고 있던 type들. 하지만 Tuple은 처음 봤다. Tuple Tuple types allow you to express an array where the type of a fixed number of elements is known, but need not be the same. For example, you may want to represent a value as a pair of a string and a number: 그냥 한마디로 각 엘리먼트마다 다른 타입을 가지고 있는 Array인데 각 엘리먼트의 타입을 지정해 줄 수 있는 것 같다. Enum A helpful addition to the standard set of datatypes from JavaScript is the enum. As in languages like C#, an enum is a way of giving more friendly names…","id":"bcf0744f-3151-5690-912b-207580cd4609","frontmatter":{"title":"Basic Types of TypeScript","created":"2018-06-12T00:00:00.000Z"}}},{"node":{"fields":{"category":["node package manager"]},"excerpt":"How to publish npm module? change package.json version push and tagging (optional) install, build command npm publish (--tag=beta, for test)","id":"4065a82d-e80f-5a4c-92ba-8ed9d5ee936f","frontmatter":{"title":"How to publish npm module?","created":"2019-04-23T00:00:00.000Z"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}